MooseX::Workers(3)    User Contributed Perl Documentation   MooseX::Workers(3)



NNAAMMEE
       MooseX::Workers - Provides a simple sub-process management for
       asynchronous tasks.

VVEERRSSIIOONN
       This document describes MooseX::Workers version 0.0.1

SSYYNNOOPPSSIISS
           package Manager;
           use Moose;
           with qw(MooseX::Workers);

           sub run {
               $_[0]->run_command(sub { sleep 500; print "Hello World\n"});
               warn "Running now ... ";
           }

           # Implement our Interface
           sub worker_manager_start { warn 'started worker manager' }
           sub worker_manager_stop  { warn 'stopped worker manager' }
           sub max_workers_reached  { warn 'maximum worker count reached' }

           sub worker_stdout  { shift; warn join ' ', @_; }
           sub worker_stderr  { shift; warn join ' ', @_; }
           sub worker_error   { shift; warn join ' ', @_; }
           sub worker_done    { shift; warn join ' ', @_; }
           sub worker_started { shift; warn join ' ', @_; }
           sub sig_child      { shift; warn join ' ', @_; }
           no Moose;

           Manager->new->run();

DDEESSCCRRIIPPTTIIOONN
       MooseX::Workers is a Role that provides easy delegation of long-running
       tasks into a managed child process. Process managment is taken care of
       via POE and it's POE::Wheel::Run module.

MMEETTHHOODDSS
       run_command ($command)
           This is the whole point of this module. This will pass $command
           through to the MooseX::Worker::Engine which will take care of
           running this asynchronously.

       check_worker_threashold
           This will check to see how many workers you have compared to the
           max_workers limit. It returns true if the $num_workers is >=
           $max_workers;

       max_workers($count)
           An accessor for the maxium number of workers. This is delegated to
           the MooseX::Workers::Engine object.

       has_workers
           Check to see if we have *any* workers currently. This is delegated
           to the MooseX::Workers::Engine object.

       num_workers
           Return the current number of workers. This is delegated to the
           MooseX::Workers::Engine object.

       meta
           The Metaclass for MooseX::Workers::Engine see Moose's
           documentation.

IINNTTEERRFFAACCEE
       MooseX::Worker::Engine supports the following callbacks:

       worker_manager_start
           Called when the managing session is started

       worker_manager_stop
           Called when the managing session stops

       max_workers_reached
           Called when we reach the maximum number of workers

       worker_stdout
           Called when a child prints to STDOUT

       worker_stderr
           Called when a child prints to STDERR

       worker_error
           Called when there is an error condition detected with the child.

       worker_done
           Called when a worker completes $command

       worker_started
           Called when a worker starts $command

       sig_child
           Called when the mangaging session recieves a SIG CHDL event

       See MooseX::Workers::Engine for more details.

CCOONNFFIIGGUURRAATTIIOONN AANNDD EENNVVIIRROONNMMEENNTT
       MooseX::Workers requires no configuration files or environment
       variables.

DDEEPPEENNDDEENNCCIIEESS
       Moose, POE, POE::Wheel::Run

IINNCCOOMMPPAATTIIBBIILLIITTIIEESS
       None reported.

BBUUGGSS AANNDD LLIIMMIITTAATTIIOONNSS
       No bugs have been reported.

       Please report any bugs or feature requests to
       "bug-moosex-workers@rt.cpan.org", or through the web interface at
       <http://rt.cpan.org>.

AAUUTTHHOORR
       Chris Prather  "<perigrin@cpan.org>"

LLIICCEENNCCEE AANNDD CCOOPPYYRRIIGGHHTT
       Copyright (c) 2007, Chris Prather "<perigrin@cpan.org>". All rights
       reserved.

       This module is free software; you can redistribute it and/or modify it
       under the same terms as Perl itself. See perlartistic.

DDIISSCCLLAAIIMMEERR OOFF WWAARRRRAANNTTYY
       BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
       FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT
       WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
       PARTIES PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND,
       EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
       WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
       ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
       YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
       NECESSARY SERVICING, REPAIR, OR CORRECTION.

       IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
       WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
       REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE LIABLE
       TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL, OR
       CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
       SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
       RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
       FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
       SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
       DAMAGES.



perl v5.8.8                       2007-09-18                MooseX::Workers(3)
